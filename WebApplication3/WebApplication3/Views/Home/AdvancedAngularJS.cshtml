
<h1>Shopping List with a Promise: its main js is ~/Scripts_Custom/AdvancedAngularJS.cshtml.js and all its child htmls or divs are under ~/Scripts_Custom/</h1>

<p class="class_green_bolder">--------------------ShoppingListController with promise calls (mimiced with $q.defer), and warning cookie or too many in console:</p>

<div id="di1" ng-controller="ShoppingListController as ctrl">
  <h3>Shopping List 1</h3>
  @* below up to next 5 Lines (to div ng-show..) can be replaced with <input-Item></input-Item>  *@
  <input type="text" ng-model="ctrl.itemName" placeholder="item name" />
  <input type="text" ng-model="ctrl.itemQuantity" placeholder="quantity" />
  boxes
  <button ng-click="ctrl.addItem();">Add Item</button>

  <div ng-show="ctrl.response.errorMessage" class="error">Error: </div>  @* it doesn't work with Shopping List 1 here because the ctrl itself (or vm.) doesn't have a ctrl.response' *@
  @* ShoppingListController > ShoppingListService handles promise in console where we can see either 'Stay away from cookies, Bing' or 'That's too much, Bing!' *@
  @* As comparison, ShoppingList2Controller has its own errorMessage variable and its ng-if (similar to ng-show) works there*@

  <ol>
    <li ng-repeat="item in ctrl.items">

      <list-item-desc></list-item-desc>   @* list-item-desc is normalized from .directive('listItemDesc',..) of js (AdvancedAngularJS.cshtml.js) *@
      @* It's another type of DDO that doesn't have its own html as inputItem does. '*@
      @* It will simply return a DDO or '{{item.quantity}} boxes of {{item.name}}' from function ListItemDesc() of js (AdvancedAngularJS.cshtml.js)  '*@

      <button ng-click="ctrl.removeItem($index);">Remove</button>
    </li>
  </ol>

  @* $http service call - calling API *@

  <br />
  <p class="class_green_bolder">
    --------------------Another type of promise: $http service call - calling /api/Shopping API
    (triggered by menu.logMenuItem(item.Id)):
  </p>
  <div ng-controller="MenuCategoriesController as menu">
    <h3>List of Menu Categories</h3>
    <ul>
      <li ng-repeat="item in menu.categories">
        @* clicking the below href makes the web page refresh and that's why we can't see menu.category and console... because they come and go quickly *@
        (<a href=" " ng-click="menu.logMenuItem(item.Id)">{{item.Id}}</a>)
        {{item.Name}} with the quantity of {{item.Quantity}} - Click the button gets a single item from API: {{menu.category}}
      </li>
      <li ng-repeat="item in menu.categories">
        @* clicking the below button does a promise call and we can see menu.category and console...*@
        (<button ng-click="menu.logMenuItem(item.Id)">{{item.Id}}</button>)
        {{item.Name}} with the quantity of {{item.Quantity}} - Click the button gets a single item from API: {{menu.category}}
      </li>
    </ul>
  </div>
</div>

<br />
<p class="class_green_bolder">
  --------------------Use DDOs: input-Item with html and list-item-desc without html, under ShoppingListController.
  It shows Errors 'That's too much, Bing!' (if >=5 items) or 'Stay away from cookies, Bing' in console:
</p>
@* below is a slightly modified copy of the above *@
<div id="di2" ng-controller="ShoppingListController as ctrl">
  <h3>Shopping List 2: a directive or a DDO with its own html</h3>

  <input-Item></input-Item>  @* input-Item is normalized from .directive('inputItem',..) of js (AdvancedAngularJS.cshtml.js) *@
  @* it has its own html - AdvancedAngularJS_InputItem.html *@
  @* it has ng-show which always hides errors or never show cookie etc errors - see the reasons above  *@

  <ol>
    <li ng-repeat="item in ctrl.items">
      <list-item-desc></list-item-desc>
      <button ng-click="ctrl.removeItem($index);">Remove</button>
    </li>
  </ol>

</div>

@* .directive(..) Attribute Isolate = or @ *@

<br />
<p class="class_green_bolder">--------------------Use DDO (shopping-list) with its own html and isolated scope variables</p>
<div id="di3" ng-controller="ShoppingListController as ctrl1">
  @*<h3>Shopping List 3</h3>*@
  <input type="text" ng-model="ctrl1.itemName" placeholder="item name" />
  <input type="text" ng-model="ctrl1.itemQuantity" placeholder="quantity" />
  boxes
  <button ng-click="ctrl1.addItem();">Add Item</button>
  <div ng-show="ctrl1.response.errorMessage" class="error">Error: </div>

  <shopping-list my-ctrl="ctrl1" title="{{ctrl1.title}}" title2='ShoppingListController.title'></shopping-list>  @* use .directive(..) with isolate scope my-ctrl from 'myCtrl' of ddo *@
  @* In other words, shopping-list binds/has its own ctrl and pass them into AdvancedAngularJS_InputItemWithIsolate.html   *@
  @* Or think of this way: the variable names in AdvancedAngularJS_InputItemWithIsolate.html can be different from the 'ctrl1' *@
  @*    and it's done by function ShoppingList() {...,scope: {ctrl: '=myCtrl', title: '@title'} .. of the js  *@

</div>

@* below id="di4" is a copy of the above for testing Directive Isolate *@

<br />
<p class="class_green_bolder">
  --------------------The DDOs same to the above under ShoppingList2Controller with ShoppingList2Service
  and ng-if to show Max items errors:
</p>
<br />
<div id="di4" ng-controller="ShoppingList2Controller as ctrl2">
  @*<h3>Shopping List 4</h3>*@
  <input type="text" ng-model="ctrl2.itemName" placeholder="item name" />
  <input type="text" ng-model="ctrl2.itemQuantity" placeholder="quantity" />
  boxes
  <button ng-click="ctrl2.addItem();">Add Item</button>
  <shopping-list my-ctrl="ctrl2" title="Shopping List 4 (Limited to 3 items)" title2='ShoppingList2Controller.title with ng-if to show Max items errors'></shopping-list>  @* use .directive(..) with isolate scope *@
  <div ng-if="ctrl2.errorMessage" class="error"> Error: {{ctrl2.errorMessage}} </div>
</div>

@* below id="di6" is for a controller inside of Directive *@

<br />
<p class="class_green_bolder">
  --------------------DDO (shopping-list3) with a inside controller. ShoppingList2Controller and
  ShoppingList3Directive with its own ShoppingList3DirectiveController and its inside Warning cookie errors:
</p>
<br />
<div id="di6" ng-controller="ShoppingList2Controller as ctrl3">
  @*<h3>Shopping List 5</h3>*@
  <input type="text" ng-model="ctrl3.itemName" placeholder="item name" />
  <input type="text" ng-model="ctrl3.itemQuantity" placeholder="quantity" />
  boxes
  <button ng-click="ctrl3.addItem();">Add Item</button>
  @*below items="ctrl3.items" is the key which is different from <shopping-list my-ctrl="ctrl2" ...> *@
  <shopping-list3 items="ctrl3.items" title="{{ctrl3.title}}"></shopping-list3>  @* use .directive(..) with isolate scope and a controller inside of it *@

  @* the above shopping-list3 pointed AdvancedAngularJS_InputItem_controller.html will be inserted here and contains the item list and errors.
    the error should be handled inside shopping-list3 which leads to a request of placing a controller inside a directive *@

</div>

@* below id="di7" is for Directive: link *@

<br />
<p class="class_green_bolder">
  --------------------DOM manipulation is usually done inside of the link function over DDO.
  The purpose of using 'link' here is to display/remove a warning message in a different way.
  DDO: Declare link function inside .directive: var ddo={ scope:{..}, link: LinkFunction, ..templateUrl: '..' }; return ddo; }
</p>
<p class="class_green_bolder">
  --------------------Use link to handle errors: DDO (shopping-list4) with both controller and link. ShoppingList2Controller
  and ShoppingList4Directive using ShoppingList3DirectiveController and with ShoppingList4DirectiveLink which
  is a function and uses an event listener scope.$watch to monitor the result of ctrl.cookiesInList()
  and then show or remove warning cookie based on the result true/false:
</p>
<br />
<div id="di7" ng-controller="ShoppingList2Controller as ctrl3">
  <input type="text" ng-model="ctrl3.itemName" placeholder="item name" />
  <input type="text" ng-model="ctrl3.itemQuantity" placeholder="quantity" />
  boxes
  <button ng-click="ctrl3.addItem();">Add Item</button>
  @*below items="ctrl3.items" is the key which is different from <shopping-list my-ctrl="ctrl2" ...> *@
  <shopping-list4 items="ctrl3.items" title="{{ctrl3.title}}"></shopping-list4>  @* use .directive(..) with link *@

  @* the above shopping-list4 pointed AdvancedAngularJS_InputItem_link.html will be inserted here and contains the item list and errors.
    the error should be handled inside shopping-list4 which leads to a request of placing a controller inside a directive *@

</div>

@* below id="di8" is for Directive: transclude *@

<br />
<p class="class_green_bolder">
  --------------------DDO: transclude: let error messages stay in the main HTML and have DDO to control its display or hiding.
  The goal is use different error messages in different places of HTML but these messages use the same DDO to control their show/hide etc behaviors.
</p>
<p class="class_green_bolder">
  --------------------Use both link and transclude to handle errors: the DDO (shopping-list5 or shoppingList5) with its own html, controller, link and transclude, under ShoppingList5Controller.
  Error messages are written here but dynamically showing/removing them is controlled by both Site.css (for removing the error by default) and shoppingList5-defined controller: ShoppingList3DirectiveController and ShoppingList5DirectiveLink :
</p>
<br />
<div id="di8" ng-controller="ShoppingList5Controller as ctrl5">
  <input type="text" ng-model="ctrl5.itemName" placeholder="item name" />
  <input type="text" ng-model="ctrl5.itemQuantity" placeholder="quantity" />
  boxes
  <button ng-click="ctrl5.addItem();">Add Item</button>
  @*below items="ctrl5.items" is the key which is different from <shopping-list my-ctrl="ctrl2" ...> *@
  <shopping-list5 id="list5" items="ctrl5.items" title="{{ctrl5.title}}">
    <div>
      @* this outter div is mapped to div of shoppingList5>AdvancedAngularJS_InputItem_transclude.html  *@
      @* the content below of the outter div for error messages is placed here under ctrl5 in the main cshtml and in ctrl5
        but their display is controlled by DDO: both ShoppingList5DirectiveLink and the <div class="error2" ng-transclude></div>
        of AdvancedAngularJS_InputItem_transclude.html  *@
      @* below are not displayed by default controlled in Site.css:.error2 > display: none *@
      <div class="title">Oh, the horror!</div>
      <div>{{ctrl5.warning}}</div>  @* ctrl5.warning is a constant string and placed here to test how it's dyinamically shown/removed together with Oh, the horror!' *@
    </div>
  </shopping-list5>  @* use .directive(..) with transclude *@


</div>



@section scripts {
  <script src="~/Scripts/angular.js"></script>
  <script src="~/Scripts_Custom/index.cshtml.js"></script>
  <script src="~/Scripts_Custom/AdvancedAngularJS.cshtml.js"></script>
}
